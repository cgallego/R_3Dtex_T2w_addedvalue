postest=list()
for (t in 1:T){
# Calcultate posterior Probabilities on grid points
temp <- predict(forest[t]$tree, newdata = data[ids_testing,]) #
postest <- append(postest, list(post = temp))
}
nrow(temp)
length(postest$post)
length(postest[1]$post)
ensem_postest = matrix(0, nrow = nrow(data[ids_testing,]), ncol = 2)
for (t in 1:T){
# collect prediction for each tree on all test cases
ensem_postest[,1] = ensem_postest[,1] + postest[t]$post[,1]
ensem_postest[,2] = ensem_postest[,2] + postest[t]$post[,2]
}
ensem_postest
Ytest
roc(data[ids_testing,"diagnosis"], ensem_postest[,1])
rocTest
roc_obj <- roc(data[ids_testing,"diagnosis"], ensem_postest[,1])
output <- list(auc=roc_obj$auc, ci=ci(roc_obj), post=post)
rocfinal <- lapply(output$ci, as.vector)
rocfinal <- do.call("cbind", rocfinal)
colnames(rocfinal) <- c("lower", "ROC", "upper")
rocTest = rbind(rocfinal)
rownames(rocTest) <- c("ensemble 10 trees")
print(rocTest)
final_test <- test_roc(treedata, X[ids_testing,], Y[ids_testing] )
rocfinal <- lapply(final_test$ci, as.vector)
rocfinal <- do.call("cbind", rocfinal)
colnames(rocfinal) <- c("lower", "ROC", "upper")
rocTest = rbind(rocfinal)
rownames(rocTest) <- c("single tree")
allrocTest = data.frame()
allrocTest = rbind(allrocTest, rocTest)
allrocTest
roc_obj <- roc(data[ids_testing,"diagnosis"], ensem_postest[,1])
output <- list(auc=roc_obj$auc, ci=ci(roc_obj), post=post)
rocfinal <- lapply(output$ci, as.vector)
rocfinal <- do.call("cbind", rocfinal)
colnames(rocfinal) <- c("lower", "ROC", "upper")
rocTest = rbind(rocfinal)
rownames(rocTest) <- c("ensemble 10 trees")
allrocTest = rbind(allrocTest, rocTest)
print(allrocTest)
ensem_postest = (1/T)*ensem_postest
head(ensem_postest)
# train a single boosting tree
treedata <- boosting(diagnosis ~ ., data = data[ids_training[training], ],
mfinal = 1,
coeflearn = "Freund",
control=fitparm)
library(MASS)
library(klaR)
library(caret)
library(rpart)
library(rpart.plot)
require(ggplot2)
library(pROC)
library(boosting)
library(adabag)
treedata <- boosting(diagnosis ~ ., data = data[ids_training[training], ],
mfinal = 1,
coeflearn = "Freund",
control=fitparm)
treedata
treedata$trees
boostrees <- boosting(diagnosis ~ ., data = data[ids_training[training], ], mfinal = 1,
coeflearn = "Freund", control=fitparm)
print(boostrees$trees)
testpred = predict.boosting(boostrees, newdata = data[ids_testing,])
testpred
boostrees$weights
boostrees$votes
boostrees <- boosting(diagnosis ~ ., data = data[ids_training[training], ], mfinal = 10,
coeflearn = "Freund", control=fitparm)
# predict on test cases
testpred = predict.boosting(boostrees, newdata = data[ids_testing,])
print(testpred$confusion)
print(boostrees$weights)
print(boostrees$weights)
boostrees <- boosting(diagnosis ~ ., data = data[ids_training[training], ], mfinal = 50,
coeflearn = "Freund", control=fitparm)
# predict on test cases
testpred = predict.boosting(boostrees, newdata = data[ids_testing,])
print(testpred$confusion)
# train ensemble of boosting trees
boostrees <- boosting(diagnosis ~ ., data = data[ids_training[training], ], mfinal = 100,
coeflearn = "Freund", control=fitparm)
# predict on test cases
testpred = predict.boosting(boostrees, newdata = data[ids_testing,])
print(testpred$confusion)
boostrees <- boosting(diagnosis ~ ., data = data[ids_training[training], ], mfinal = 1,
coeflearn = "Freund", control=fitparm)
# predict on test cases
testpred = predict.boosting(boostrees, newdata = data[ids_testing,])
print(testpred$confusion)
print(boostrees$weights)
boostrees <- boosting(diagnosis ~ ., data = data[ids_training[training], ], mfinal = 25,
coeflearn = "Freund", control=fitparm)
# predict on test cases
testpred = predict.boosting(boostrees, newdata = data[ids_testing,])
print(testpred$confusion)
boostrees10 <- boosting(diagnosis ~ ., data = data[ids_training[training], ],
mfinal = 10, coeflearn = "Freund")
# predict on test cases
testpred10 = predict.boosting(boostrees10, newdata = data[ids_testing,])
print(testpred10$confusion)
print(boostrees10$weights)
boostree <- boosting(diagnosis ~ ., data = data[ids_training[training], ],
mfinal = 1, coeflearn = "Freund", control=fitparm)
# predict on test cases
testpred = predict.boosting(boostree, newdata = data[ids_testing,])
print(testpred$confusion)
print(boostree$weights)
boostree <- boosting(diagnosis ~ ., data = data[ids_training[training], ],
mfinal = 1, coeflearn = "Freund")
# predict on test cases
testpred = predict.boosting(boostree, newdata = data[ids_testing,])
print(testpred$confusion)
print(boostree$weights)
boostrees10 <- boosting(diagnosis ~ ., data = data[ids_training[training], ],
mfinal = 10, coeflearn = "Freund")
# predict on test cases
testpred10 = predict.boosting(boostrees10, newdata = data[ids_testing,])
print(testpred10$confusion)
print(boostrees10$weights)
testpred10$prob
boostrees10$prob
roc(data[ids_testing,"diagnosis"], boostrees10$prob[,1])
a=boostrees10$prob
a=data[ids_testing,"diagnosis"]
length(data[ids_testing,"diagnosis"])
testpred10$prob
roc_obj <- roc(data[ids_testing,"diagnosis"], testpred10$prob[,1])
output <- list(auc=roc_obj$auc, ci=ci(roc_obj), post=post)
rocfinal <- lapply(output$ci, as.vector)
rocfinal <- do.call("cbind", rocfinal)
colnames(rocfinal) <- c("lower", "ROC", "upper")
rocTest = rbind(rocfinal)
rocTest
rownames(rocTest) <- c("boosting 10 trees")
allrocTest = rbind(allrocTest, rocTest)
allrocTest
################
## Calculate and plot an ROC with CI and optimal threshold
################
calcAUC_plot <- function(obs, probpred, xptext, yptext, icolors, atitle){
library(pROC)
ROC <- plot.roc(obs,
probpred,
ci=TRUE, print.auc=TRUE, print.auc.x=xptext, print.auc.y=yptext,
col=icolors, lty=1, legacy.axes=TRUE,
main=atitle)
# determine best operating point (maximizes both Se Spe)
# “best”: the threshold with the highest sum sensitivity + specificity is plotted (this might be more than one threshold).
best_thr=ci(ROC, of="thresholds", thresholds="best")
plot(best_thr, col=icolors) # add one threshold
print(ROC$auc)
print(best_thr)
output <- list(auc=ROC$auc, best_thr=best_thr)
return(output)
}
final_test
par(mfrow=c(1,1))
n=15
colors = rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, alpha = 1)
# plot 1/4
p1 = calcAUC_plot(data[ids_testing,"diagnosis"], final_test$post[,1]),
xptext=0.45, yptext=0.65 ,colors[1], atitle="")
par(new=TRUE)
p2 = calcAUC_plot(data[ids_testing,"diagnosis"], ensem_postest[,1]),
xptext=0.55, yptext=0.55 ,colors[8], atitle="")
par(new=TRUE)
p3 = calcAUC_plot(data[ids_testing,"diagnosis"], testpred10$prob[,1]),
xptext=0.65, yptext=0.45 ,colors[12], atitle="ROCs in test cases ")
par(mfrow=c(1,1))
n=15
colors = rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, alpha = 1)
# plot 1/4
p1 = calcAUC_plot(data[ids_testing,"diagnosis"], final_test$post[,1],
xptext=0.45, yptext=0.65 ,colors[1], atitle="")
par(new=TRUE)
p2 = calcAUC_plot(data[ids_testing,"diagnosis"], ensem_postest[,1],
xptext=0.55, yptext=0.55 ,colors[8], atitle="")
par(new=TRUE)
p3 = calcAUC_plot(data[ids_testing,"diagnosis"], testpred10$prob[,1],
xptext=0.65, yptext=0.45 ,colors[12], atitle="ROCs in test cases ")
legend("bottomright",
legend = c(paste0("Single Tree"),
paste0("Bagging 10 trees"),
paste0("Boosting 10 trees")),
col = c(colors[1],colors[8],colors[12]), lwd = 2)
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/recap_T2w_addedvalue/Rdata/final_classifierT2wSI_boosting.RData")
k
nrow(perfT2wSI)
nrow(perfT2wSI_lop)
perfT2wSI_lop
allf = read_T1T2uniqcad_parti(id_cad_pts, uniq_cad, allpartitionsetD, npatients, k)
## formant
Trainset = allf[[1]]; Trainsetinfo = allf[[5]]
Testset = allf[[2]]; Testsetinfo = allf[[6]]
dfinfo = cbind(Testsetinfo[,c(1,3,6:7,13,25:27)], Testset$find_t2_signal_int)
print(dfinfo)
Testset$id = Testsetinfo$lesion_id
l
k
perf_cascadeall
perfT2wSI_lop
dfinfoT2wSI_lop
print(summary(loperf_HyperNone))
print(summary(loperf_IntenseorNot))
print(summary(loperf_HyperorSlight))
# plot
lop_accuracies = data.frame(Accuracy=loperf_HyperNone, type="Hyper.v.s.None")
lop_accuracies = rbind(lop_accuracies, data.frame(Accuracy=loperf_IntenseorNot, type="Intense.v.s.None"))
lop_accuracies = rbind(lop_accuracies, data.frame(Accuracy=loperf_HyperorSlight, type="Hyper.v.s.SlightHyper"))
p <- ggplot(lop_accuracies, aes(type, Accuracy))
p + geom_boxplot() + geom_jitter(width = 0.2)
require(ggplot2)
print(summary(loperf_HyperNone))
print(summary(loperf_IntenseorNot))
print(summary(loperf_HyperorSlight))
# plot
lop_accuracies = data.frame(Accuracy=loperf_HyperNone, type="Hyper.v.s.None")
lop_accuracies = rbind(lop_accuracies, data.frame(Accuracy=loperf_IntenseorNot, type="Intense.v.s.None"))
lop_accuracies = rbind(lop_accuracies, data.frame(Accuracy=loperf_HyperorSlight, type="Hyper.v.s.SlightHyper"))
p <- ggplot(lop_accuracies, aes(type, Accuracy))
p + geom_boxplot() + geom_jitter(width = 0.2)
print(confusionMatrix(factor(perf_cascadeall$pred), factor(perf_cascadeall$cascade_obs)))
# perf_cascadeall, based on treedata
#  pass1: P(1==Intense    0==None)
#  pass2: P(1==Hypointense or not seen,   0==Intense)
#  pass3: P(1==Hyperintense,   0==Slightly hyperintense)
perfpass1 = subset(perf_cascadeall, pass=="pass1")
perfpass1$cascade_obs = factor(ifelse(perfpass1$cascade_obs=="Intense",1,0))
perfpass2 = subset(perf_cascadeall, pass=="pass2")
perfpass2$cascade_obs = factor(ifelse(perfpass2$cascade_obs=="Hypointense or not seen",1,0))
perfpass3 = subset(perf_cascadeall, pass=="pass3")
perfpass3$cascade_obs = factor(ifelse(perfpass3$cascade_obs=="Hyperintense",1,0))
par(mfrow=c(1,1))
n=15
colors = rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, alpha = 1)
# plot 1/4
p1 = calcAUC_plot(perfpass1$cascade_obs, perfpass1$P,
xptext=0.45, yptext=0.65 ,colors[1], atitle="")
par(new=TRUE)
p2 = calcAUC_plot(perfpass2$cascade_obs, perfpass2$P,
xptext=0.55, yptext=0.55 ,colors[8], atitle="")
par(new=TRUE)
p3 = calcAUC_plot(perfpass3$cascade_obs, perfpass3$P,
xptext=0.65, yptext=0.45 ,colors[12], atitle="ROCs leave-one-out cascading 3 passes ")
legend("bottomright",
legend = c(paste0("Hyper.v.s.None"), paste0("Intense.v.s.Notseen"),paste0("Hyper.v.s.slightlyHyper")),
col = c(colors[1],colors[8],colors[12]), lwd = 2)
overallperf = rbind(perfpass1, perfpass2, perfpass3)
library(pROC)
ROC_overall <- plot.roc(overallperf$cascade_obs, overallperf$P, col = "#000093", lty = 1, legacy.axes=TRUE,
main = "overall ROC for boosting tree predictor of BIRADS T2sI")
print(ROC_overall$auc)
listids = c()
revperfT2wSI_lop = data.frame()
for(i in 1:nrow(perfT2wSI_lop)){
if( !perfT2wSI_lop$id[i] %in% listids ){
listids = c(listids, perfT2wSI_lop$id[i])
revperfT2wSI_lop = rbind(revperfT2wSI_lop, perfT2wSI_lop[i,])
}
}
print(confusionMatrix(factor(revperfT2wSI_lop$pred), factor(revperfT2wSI_lop$obs)))
library(caret)
print(confusionMatrix(factor(revperfT2wSI_lop$pred), factor(revperfT2wSI_lop$obs)))
print(nrow(revperfT2wSI_lop))
dfres_pass1None = subset(revperfT2wSI_lop, obs == "None")[,4:5]
dfres_pass1None$category = "Hyper.v.s.None"
dfres_pass1None$classification = ifelse(as.character(dfres_pass1None$pred) == dfres_pass1None$obs,"correct","incorrect")
dfres_pass1None$classtype = "cascade"
# pass2
dfres_pass2Hypo = subset(revperfT2wSI_lop, obs == "Hypointense or not seen")[,4:5]
dfres_pass2Hypo$category = "Hypointense or not seen"
dfres_pass2Hypo$classification = ifelse(as.character(dfres_pass2Hypo$pred) == dfres_pass2Hypo$obs,"correct","incorrect")
dfres_pass2Hypo$classtype = "cascade"
# pass3
dfres_pass3Hyper = subset(revperfT2wSI_lop, obs == "Hyperintense")[,4:5]
dfres_pass3Hyper$category = "Hyperintense"
dfres_pass3Hyper$classification = ifelse(as.character(dfres_pass3Hyper$pred) == dfres_pass3Hyper$obs,"correct","incorrect")
dfres_pass3Hyper$classtype = "cascade"
dfres_pass3SHyper  = subset(revperfT2wSI_lop, obs == "Slightly hyperintense")[,4:5]
dfres_pass3SHyper$category = "Slightly hyperintense"
dfres_pass3SHyper$classification = ifelse(as.character(dfres_pass3SHyper$pred) == dfres_pass3SHyper$obs,"correct","incorrect")
dfres_pass3SHyper$classtype = "cascade"
dfres_cascade = rbind(dfres_pass1None, dfres_pass2Hypo, dfres_pass3Hyper, dfres_pass3SHyper)
#### plot
g = ggplot(dfres_cascade, aes(factor(category), fill=classification))
g + geom_bar(aes(y = ..count..)) +
geom_text(aes(label = format(..count.., digits=2, drop0trailing=TRUE)), stat= "count") +
facet_grid(~classtype)
dfT2SI = data.frame()
df1 = subset(revperfT2wSI_lop, obs=="Hyperintense")
df1$obs_t2_si = ifelse(df1$obs=="Hyperintense",1,0)
df1$pred_t2_si = ifelse(df1$pred=="None",0,1)
df1$category = "Hyperintense"
df1$classification = ifelse(df1$obs_t2_si == df1$pred_t2_si, "correct", "incorrect")
df1$classtype = "boostingTrees"
dfT2SI = rbind(dfT2SI, df1)
df2 = subset(revperfT2wSI_lop, obs=="Slightly hyperintense")
df2$obs_t2_si = ifelse(df2$obs == "Slightly hyperintense",1,0)
df2$pred_t2_si = ifelse(df2$pred=="None",0,1)
df2$category = "Slightly hyperintense"
df2$classification = ifelse(df2$obs_t2_si == df2$pred_t2_si, "correct", "incorrect")
df2$classtype = "boostingTrees"
dfT2SI = rbind(dfT2SI, df2)
df3 = subset(revperfT2wSI_lop, obs=="Hypointense or not seen")
df3$obs_t2_si = ifelse(df3$obs == "Hypointense or not seen",1,0)
df3$pred_t2_si = ifelse(df3$pred=="None",0,1)
df3$category = "Hypointense or not seen"
df3$classification = ifelse(df3$obs_t2_si == df3$pred_t2_si, "correct", "incorrect")
df3$classtype = "boostingTrees"
dfT2SI = rbind(dfT2SI, df3)
### print accuracy in the overall T2w SI categories
print(sum(dfT2SI$classification=="correct")/length(dfT2SI$classification))
df4 = subset(revperfT2wSI_lop, obs=="None")
df4$obs_t2_si = ifelse(df4$obs == "None",1,0)
df4$pred_t2_si = 1
df4$pred_t2_si[df4$pred=="Hypointense or not seen" | df4$pred=="None"] = 0
df4$category = "No signal"
df4$classification = ifelse(df4$obs_t2_si == df4$pred_t2_si, "correct", "incorrect")
df4$classtype = "boostingTrees"
dfT2SI = rbind(dfT2SI, df4)
### print accuracy in the overall not reported T2w SI
print(sum(df4$classification=="correct")/length(df4$classification))
datlabels = data.frame()
dfl1 = data.frame(count = c(sum(df1$classification=="correct"), sum(df1$classification=="incorrect")))
dfl1$ypos = c(dfl1$count[1]*0.5, dfl1$count[1]+dfl1$count[2]*0.5)
dfl1$category = df1$category[1]
dfl1$classification = c("correct", "incorrect")
datlabels = rbind(datlabels, dfl1)
dfl2 = data.frame(count = c(sum(df2$classification=="correct"), sum(df2$classification=="incorrect")))
dfl2$ypos = c(dfl2$count[1]*0.5, dfl2$count[1]+dfl2$count[2]*0.5)
dfl2$category = df2$category[1]
dfl2$classification = c("correct", "incorrect")
datlabels = rbind(datlabels, dfl2)
dfl3 = data.frame(count = c(sum(df3$classification=="correct"), sum(df3$classification=="incorrect")))
dfl3$ypos = c(dfl3$count[1]*0.5, dfl3$count[1]+dfl3$count[2]*0.5)
dfl3$category = df3$category[1]
dfl3$classification = c("correct", "incorrect")
datlabels = rbind(datlabels, dfl3)
dfl4 = data.frame(count = c(sum(df4$classification=="correct"), sum(df4$classification=="incorrect")))
dfl4$ypos = c(dfl4$count[1]*0.5, dfl4$count[1]+dfl4$count[2]*0.5)
dfl4$category = df4$category[1]
dfl4$classification = c("correct", "incorrect")
datlabels = rbind(datlabels, dfl4)
g = ggplot(dfT2SI, aes(category, fill = classification))
g + geom_bar() + facet_grid(. ~ classtype) + scale_fill_brewer(palette = "Set2") +
stat_count(width = 0.5) +
geom_text(data=datlabels, aes(label=count, y=ypos), angle = 0)
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/recap_T2w_addedvalue/Rdata/final_classifierT2wSI_boosting.RData")
k
allfeatures = rbind(allfT2[[1]], allfT2[[2]])
allfT2 = read_T2uniqcad_parti(id_cad_pts, uniq_cad, allpartitionsetD, npatients, 1)
allfeatures = rbind(allfT2[[1]], allfT2[[2]])
alllesioninfo = rbind(allfT2[[5]], allfT2[[6]])
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/recap_T2w_addedvalue/Rdata/T2_addeddiagvalue_params_wbagging.RData")
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/recap_T2w_addedvalue/Rdata/T2_addeddiagvalue_params_wbagging.RData")
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/recap_T2w_addedvalue/Rdata/T2_addeddiagvalue_params_wbagging.RData")
k
boostcvperf
grd
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/recap_T2w_addedvalue/Rdata/T2_addeddiagvalue_params_wbagging.RData")
k
imgT2boostcvperf = subset(boostcvperf, type=="imgT2")
allT2boostcvperf = subset(boostcvperf, type=="allT2")
imgT1onlyboostcvperf = subset(boostcvperf, type=="imgT1only")
T1T2boostcvperf = subset(boostcvperf, type=="T1+T2")
# plot results
imgT2rfcvperf = subset(rfcvperf, type=="imgT2")
allT2rfcvperf = subset(rfcvperf, type=="allT2")
imgT1onlyrfcvperf = subset(rfcvperf, type=="imgT1only")
T1T2rfcvperf = subset(rfcvperf, type=="T1+T2")
################
# for imgT2boostcvperf
p <- ggplot(data=imgT2boostcvperf, aes(x=ntrees, y=cv.error, group=ntrees, colour=factor(ntrees)))
p + geom_point(size=3) + theme_bw(base_size = 14) + facet_grid(~maxD) +
scale_y_continuous(limits=c(0, max(imgT2boostcvperf$cv.error)+0.05))
bestune_imgT2 = imgT2boostcvperf[imgT2boostcvperf$cv.error==min(imgT2boostcvperf$cv.error),]
print(bestune_imgT2)
p <- ggplot(data=imgT2rfcvperf, aes(x=ntrees, y=cv.error, group=ntrees, colour=factor(ntrees)))
p + geom_point(size=3) + theme_bw(base_size = 14) + facet_grid(~maxD) +
scale_y_continuous(limits=c(0, max(imgT2rfcvperf$cv.error)+0.05))
rfbestune_imgT2 = imgT2rfcvperf[imgT2rfcvperf$cv.error==min(imgT2rfcvperf$cv.error),]
print(rfbestune_imgT2)
bestune_allT2 = allT2boostcvperf[allT2boostcvperf$cv.error==min(allT2boostcvperf$cv.error),]
print(bestune_allT2)
rfbestune_allT2 = allT2rfcvperf[allT2rfcvperf$cv.error==min(allT2rfcvperf$cv.error),]
print(rfbestune_allT2)
bestune_imgT1only = imgT1onlyboostcvperf[imgT1onlyboostcvperf$cv.error==min(imgT1onlyboostcvperf$cv.error),]
print(bestune_imgT1only)
rfbestune_imgT1only = imgT1onlyrfcvperf[imgT1onlyrfcvperf$cv.error==min(imgT1onlyrfcvperf$cv.error),]
print(rfbestune_imgT1only)
bestune_T1T2 = T1T2boostcvperf[T1T2boostcvperf$cv.error==min(T1T2boostcvperf$cv.error),]
print(bestune_T1T2)
rfT1T2rfcvperf = T1T2rfcvperf[T1T2rfcvperf$cv.error==min(T1T2rfcvperf$cv.error),]
print(rfT1T2rfcvperf)
rfT1T2rfcvperf = T1T2rfcvperf[T1T2rfcvperf$cv.error==min(T1T2rfcvperf$cv.error),]
print(rfT1T2rfcvperf)
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/lop_final_T2w_addedvalue/batch4_cache/lop-batch4-plots_7fc5cf2927253a572f5a6304c1784062.RData")
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/lop_final_T2w_addedvalue/Outputs/CADT2_addeddiagvalue_lop_batch4.RData")
View(bestune_T1T2)
bestune_imgT2
bestune_allT2
bestune_imgT1only
bestune_T1T2
k
lopaccu_imgT2
summary(lopaccu_imgT2)
perf_imgT2
perf_all
par(mfrow=c(1,1))
n=15
colors = rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, alpha = 1)
# plot 1/4
p1 = calcAUC_plot(perf_imgT2$obs, perf_imgT2$C,
xptext=0.45, yptext=0.75 ,colors[2], atitle="")
par(new=TRUE)
p2 = calcAUC_plot(perf_allT2$obs, perf_allT2$C,
xptext=0.55, yptext=0.65 ,colors[9], atitle="")
par(new=TRUE)
p3 = calcAUC_plot(perf_imgT1$obs, perf_imgT1$C,
xptext=0.65, yptext=0.55 ,colors[11], atitle="")
par(new=TRUE)
p4 = calcAUC_plot(perf_all$obs, perf_all$C,
xptext=0.75, yptext=0.45 ,colors[14], atitle="ROCs leave-one-patient out test ")
legend("bottomright",
legend = c(paste0("imgT2w"),
paste0("imgT2w+predT2w"),
paste0("imgT1w"),
paste0("imgT1+imgT2w+predT2w")),
col = c(colors[2],colors[9],colors[11],colors[14]), lwd = 2)
perf_allT2$id
unique(perf_allT2$id)
perf_allT2[unique(perf_allT2$id),]
perf_allT2[perf_allT2$id==528,]
perf_allT2[perf_allT2$id==1,]
perf_allT2=perf_allT2[unique(perf_allT2$id),]
perf_imgT1
perf_imgT1=perf_imgT1[unique(perf_imgT1$id),]
perf_imgT2=perf_imgT2[unique(perf_imgT2$id),]
perf_all=perf_all[unique(perf_all$id),]
## plot ROCs each pass individually in l-o-p heldout test cases
par(mfrow=c(1,1))
n=15
colors = rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, alpha = 1)
# plot 1/4
p1 = calcAUC_plot(perf_imgT2$obs, perf_imgT2$C,
xptext=0.45, yptext=0.75 ,colors[2], atitle="")
par(new=TRUE)
p2 = calcAUC_plot(perf_allT2$obs, perf_allT2$C,
xptext=0.55, yptext=0.65 ,colors[9], atitle="")
par(new=TRUE)
p3 = calcAUC_plot(perf_imgT1$obs, perf_imgT1$C,
xptext=0.65, yptext=0.55 ,colors[11], atitle="")
par(new=TRUE)
p4 = calcAUC_plot(perf_all$obs, perf_all$C,
xptext=0.75, yptext=0.45 ,colors[14], atitle="ROCs leave-one-patient out test ")
legend("bottomright",
legend = c(paste0("imgT2w"),
paste0("imgT2w+predT2w"),
paste0("imgT1w"),
paste0("imgT1+imgT2w+predT2w")),
col = c(colors[2],colors[9],colors[11],colors[14]), lwd = 2)
# find significants: only imgT2 vs. allT2
roc.test(p1$ROC, p2$ROC, method=c("bootstrap"), alternative = c("less"), boot.stratified=TRUE)
# find significants: mass imgT1 vs all
roc.test(p3$ROC, p4$ROC, method=c("bootstrap"), alternative = c("two.sided"), boot.stratified=TRUE)
# find significants: mass allT2 vs all
roc.test(p2$ROC, p4$ROC, method=c("bootstrap"), alternative = c("two.sided"), boot.stratified=TRUE)
k
445-250
404-663
library(caret)
require(ggplot2)
library("RSQLite")
setwd("Z:/Cristina/MassNonmass/Section 2 - Experiments/lop_3Dtex_T2w_addedvalue/LMSIR")
source('Z:/Cristina/MassNonmass/Section 2 - Experiments/lop_3Dtex_T2w_addedvalue/functions.R')
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/lop_3Dtex_T2w_addedvalue/Inputs/allpartitionsetD")
load("Z:/Cristina/MassNonmass/Section 2 - Experiments/lop_3Dtex_T2w_addedvalue/LMSIR/Rdata/T2_featurespred_LMSIR.RData")
npatients = length(uniq_cad)
allf = read_T1T2uniqcad_parti(id_cad_pts, uniq_cad, allpartitionsetD, npatients, 1)
## formant
allfeatures = rbind(allf[[1]], allf[[2]])
alllesioninfo = rbind(allf[[5]], allf[[6]])
### print number of total lesions
# before was ##   C / NC = 110 / 177
print(summary(as.factor(allfeatures$orig_label)))
#######################
# format datasets with find_t2_signal_int as response variable
LMSIRt2_signal = na.omit(cbind(allfeatures["LMSIR"], allfeatures[,2:ncol(allfeatures)]))
names(LMSIRt2_signal)
the remaining observations.
set.seed(01)
train = createDataPartition(y = LMSIRt2_signal$orig_label, ## the outcome data are needed
p = .9, ## The percentage of data in the training set
list = TRUE) ## The format of the results.
LMSIRt2_signal = LMSIRt2_signal[, -c(202,ncol(LMSIRt2_signal))]
summary(LMSIRt2_signal$LMSIR)
LMSIRt2_signal = LMSIRt2_signal[, -c(202,ncol(LMSIRt2_signal))]
summary(LMSIRt2_signal$LMSIR)
#######################
# Subset previuosly selected features
# for Boruta
borutasel = unique(ordered_zscores[,2])
rrfsel = as.character(unique(allLMSIRfeatures[,1]))
LMSIR_featsel = unique(borutasel, rrfsel)
